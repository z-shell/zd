#!/usr/bin/env zunit
#
# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
#

@setup {
  load setup
  setup
}

@teardown {
  load teardown
  teardown
}

#@test 'sbin ice' {
#  run ./scripts/docker-run.sh --wrap --debug --zunit \
#    zi light z-shell/z-a-bin-gem-node\;\
#    zi light-mode as"null" from"gh-r" sbin'fzf' for junegunn/fzf

#  assert $state equals 0
  # We can't assert 'Downloading z-shell/z-a-bin-gem-node'
  # because of the control chars (colored output)
#  assert "$output" contains "Downloading"

#  local artifact="${PLUGINS_DIR}/z-shell---z-a-bin-gem-node/z-a-bin-gem-node.plugin.zsh"
#  assert "$artifact" is_file
#  assert "$artifact" is_readable

#  artifact="${ZPFX}/bin/fzf"
#  assert "$artifact" is_file
#  assert "$artifact" is_executable
#}

#@test 'failing atclone ice' {
#  local z=$'zi null atclone'\''echo "intentional failure"; return 255'\'' for z-shell/null'
#  run ./scripts/docker-run.sh --wrap --debug --zunit $z

#  assert $state not_equal_to 0
#  assert $state equals 255
#  assert "$output" contains "intentional failure"
#}

#@test 'failing atpull ice' {
#  local z=$'zi id-as'\''atpull-fail'\'' null \
#      atpull'\''echo "intentional failure"; return 255'\'' \
#      run-atpull \
#    for z-shell/null; \
#    zi update atpull-fail'
#  run ./scripts/docker-run.sh --wrap --debug --zunit $z

#  assert $state equals 255
#  assert "$output" contains "intentional failure"
#}

@test 'failing mv ice' {
  local z=$'zi as'\''command'\'' from'\''gh-r'\'' bpick'\''*musl*'\'' mv'\''DOES_NOT_EXIST* -> fd'\'' pick'\''fd/fd'\'' for @sharkdp/fd'
  run ./scripts/docker-run.sh --wrap --debug --zunit $z

  assert $state equals 1
  assert "$output" contains "DOES_NOT_EXIST"
  assert "$output" contains "didn't match any file"
}

@test 'mv ice' {
  local z=$'zi as'\''command'\'' from'\''gh-r'\'' bpick'\''*musl*'\'' mv'\''fd* -> fd'\'' pick'\''fd/fd'\'' for @sharkdp/fd'
  run ./scripts/docker-run.sh --wrap --debug --zunit $z

  assert $state equals 0
  assert "$output" contains "Downloading"

  local artifact="${PLUGINS_DIR}/sharkdp---fd/fd/fd"
  assert "$artifact" is_file
  assert "$artifact" is_readable
  assert "$artifact" is_executable
}
